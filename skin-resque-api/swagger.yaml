openapi: 3.0.0

info:
  title: SkinResqueApi
  description: Serving content for SkinResque
  version: "1.0"

servers:
  - url: http://localhost:3000
    description: Local instance

paths:
  "/cosmetics":
    get:
      description: Retrives all cosmetics
      operationId: cosmeticsAll
      parameters:
        - in: "query"
          name: size
          schema:
            type: integer
            minimum: 1
            maximum: 50
          description: Size of page
        - in: "query"
          name: page
          schema:
            type: integer
            minimum: 0
          description: Number of page
        - in: "query"
          name: "name"
          schema:
            type: string
          description: "Name to look for"
        - in: "query"
          name: "type"
          schema:
            $ref: "#/components/schemas/SkinType"
          description: "Type of skin to look for"
      responses: 
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cosmetic"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Couldn't retrive cosmetics
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/cosmetics/{id}":
    get:
      description: Retrive specific cosmetic
      operationId: cosmeticOne
      parameters:
        - in: "path"
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cosmetic"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Doesn't exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Couldn't retrive cosmetic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  "/users/{id}":
    get:
      description: Retrive specific user
      parameters:
        - in: path
          name: id
          required:  true
          description:  User's id
          schema:
            type:  string
      responses:
        200:
          description: Successfuly retrived user
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Not found
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: Couldn't retrive the user
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update whole user profile
      description: Updates whole users profile. Any unfilled data means wipe of previous data 
      parameters:
        - in: path
          name: id
          schema:
            type: string
          description: User's id
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                email:
                  type: string
                  description: New email
                login:
                  type: string
                  description: New login
                skinType:
                  $ref: "#/components/schemas/SkinType"
      responses:
        204:
          description: User successfuly updated
        
          

components:
  schemas:
    SkinType:
      type: string
      enum: 
        - dry
        - else

    Ingredient:
      type: string
      example: "Water"

    HexColor:
      type: string
      example: "#141617"

    Pallete:
      type: object
      properties:
        id:
          type: string
          example: "5effaa5662679b5af2c58829"
        name: 
          type: string
          example: "Autumn vibes"
        colors:
          type: array
          items:
            $ref: "#/components/schemas/HexColor"
      required:
        - id
        - name
        - colors
          

    Cosmetic:
      type: object
      properties:
        id:
          type: string
          example: "5effaa5662679b5af2c58829"
        name:
          type: string
          example: "Fancy goo serum"
        description:
          type: string
          example: "Cosmetic for dry skin"
        recipe:
          type: string
          example: "Add salt to water, then stir"
        ingredients:
          type: array
          items: 
            $ref: "#/components/schemas/Ingredient"    
      required: 
        - id
        - name
        - description
        - ingredients

    User:
      type: object
      properties:
        id:
          type: string
          example: "5effaa5662679b5af2c58829"
        name:
          type: string
          example: "MrSpaceMan1"
        email:
          type: string
          example: "example@example.net"
        skinType:
          $ref: "#/components/schemas/SkinType"
        savedCosmetics:
          type: array
          items:
            $ref: "#/components/schemas/Cosmetic"
        savedPalletes:
          type: array
          items:
            $ref: "#/components/schemas/Pallete"
      required:
        - id
        - name
        - email
        - skinType
        - savedCosmetics
        - savedPalletes
           
    Error:
      type: object
      properties:
        name:
          type: string
          example: Service down
        code:
          type: integer
          example: 23
            
  